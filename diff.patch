diff --git argoverse/data_loading/argoverse_tracking_loader.py argoverse/data_loading/argoverse_tracking_loader.py
index 0e53d43..b24e634 100644
--- argoverse/data_loading/argoverse_tracking_loader.py
+++ argoverse/data_loading/argoverse_tracking_loader.py
@@ -15,7 +15,7 @@ from argoverse.data_loading.pose_loader import get_city_SE3_egovehicle_at_sensor
 from argoverse.data_loading.synchronization_database import SynchronizationDB
 from argoverse.utils.calibration import Calibration, load_calib, load_image
 from argoverse.utils.camera_stats import CAMERA_LIST, RING_CAMERA_LIST, STEREO_CAMERA_LIST
-from argoverse.utils.ply_loader import load_ply
+from argoverse.utils.ply_loader import load_ply, load_ply_ring
 from argoverse.utils.se3 import SE3
 
 logger = logging.getLogger(__name__)
@@ -552,6 +552,32 @@ Total bounding box: {sum(num_annotations)}
             return load_ply(self._lidar_list[log_id][idx])
         return self._lidar_list[log_id][idx]
 
+    def get_lidar_ring(self, idx: int, log_id: Optional[str] = None, load: bool = True) -> Union[str, np.ndarray]:
+        """Get lidar corresponding to frame index idx (in lidar frame).
+
+        Args:
+            idx: Lidar frame index
+            log_id: ID of log to search (default: current log)
+            load: whether to load up the data, will return path to the lidar file if set to false
+
+        Returns:
+            Either path to lidar at a specific index, or point cloud data if load is set to True
+        """
+        assert self.lidar_timestamp_list is not None
+        assert self._lidar_timestamp_list is not None
+        assert self.lidar_list is not None
+        assert self._lidar_list is not None
+
+        if log_id is None:
+            log_id = self.current_log
+
+        assert idx < len(self._lidar_timestamp_list[log_id])
+
+        if load:
+            return load_ply_ring(self._lidar_list[log_id][idx])
+        return self._lidar_list[log_id][idx]
+
+
     def get_label_object(self, idx: int, log_id: Optional[str] = None) -> List[ObjectLabelRecord]:
         """Get label corresponding to frame index idx (in lidar frame).
 
diff --git argoverse/utils/ply_loader.py argoverse/utils/ply_loader.py
index 06d7586..aaba896 100644
--- argoverse/utils/ply_loader.py
+++ argoverse/utils/ply_loader.py
@@ -26,3 +26,23 @@ def load_ply(ply_fpath: _PathLike) -> np.ndarray:
     z = np.array(data.points.z)[:, np.newaxis]
 
     return np.concatenate((x, y, z), axis=1)
+
+
+def load_ply_ring(ply_fpath: _PathLike) -> np.ndarray:
+    """Load a point cloud file from a filepath.
+
+    Args:
+        ply_fpath: Path to a PLY file
+
+    Returns:
+        arr: Array of shape (N, 5)
+    """
+
+    data = pyntcloud.PyntCloud.from_file(os.fspath(ply_fpath))
+    x = np.array(data.points.x)[:, np.newaxis]
+    y = np.array(data.points.y)[:, np.newaxis]
+    z = np.array(data.points.z)[:, np.newaxis]
+    i = np.array(data.points.intensity)[:, np.newaxis]
+    ring = np.array(data.points.laser_number)[:, np.newaxis]
+
+    return np.concatenate((x, y, z, i, ring), axis=1)
